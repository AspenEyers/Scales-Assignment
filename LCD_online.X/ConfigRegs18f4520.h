#ifndef CONFIGREGS18F4520_H
#define CONFIGREGS18F4520_H


/*!
    @file       ConfigRegs18f4520.h

    @brief      Include file to set the Configuration Bits of a PIC18F4520.

    If the macro __DEBUG is defined, the bits are set as appropriate for
    development and debugging:
        - HS Oscillator; Oscillator Switch disabled; Power-On Timer;
        - Brown-out Reset disabled;
        - Watchdog Timer disabled;
        - CCP2 Multiplex disabled;
        - Stack Overflow Reset;
        - Low-voltage Programming disabled, Debug mode enabled;
        - No protection bits set.

    If the macro __DEBUG is NOT defined, the bits are set as appropriate for
    production code release:
        - HS Oscillator; Oscillator Switch disabled; Power-On Timer;
        - Brown-out Reset enabled at 4.2V;
        - Watchdog Timer disabled;
        - CCP2 Multiplex disabled;
        - Stack Overflow Reset;
        - Low-voltage Programming and Debug mode disabled;
        - No protection bits set.

    @version    0.1 - derived from ConfigRegs18F452.h
    @date       28-Aug-2014
    @author     David Rye



    @note   This file was generated by the compiler from the command line:
            mcc18 -p18f4520 --help-config > configReg18F4520.h

    @todo   Consider if Watchdog Timer should be enabled for production code,
            and add WDT management code if so.

    @todo   Consider if Stack Overflow Reset should be enabled for production
            code. It may be better not to, as there is no re-entrant or
            recursive code, or dynamic memory allocation here - if the code
            loads statically it should run.

    @todo   Change startup code c016iz.c so that everything (including
            initialised variables) correctly re-starts if main() ever exits
            or a BOR or WDT reset occurs.
*/


#include <p18cxxx.h>


// Configuration settings available for 18F452 Processor
// =====================================================

#ifndef __18F4520
#error  "ERROR: Configuration-header file mismatch.  Verify selected processor."
#endif


// Configuration settings available for processor PIC18F4520
//
//  Oscillator Selection bits:
//    OSC = LP            LP oscillator
//    OSC = XT            XT oscillator
//    OSC = HS            HS oscillator
//    OSC = RC            External RC oscillator, CLKO function on RA6
//    OSC = EC            EC oscillator, CLKO function on RA6
//    OSC = ECIO6         EC oscillator, port function on RA6
//    OSC = HSPLL         HS oscillator, PLL enabled (Clock Frequency = 4 x
//                        FOSC1)
//    OSC = RCIO6         External RC oscillator, port function on RA6
//    OSC = INTIO67       Internal oscillator block, port function on RA6 and RA7
//    OSC = INTIO7        Internal oscillator block, CLKO function on RA6, port
//                        function on RA7
//
//  Fail-Safe Clock Monitor Enable bit:
//    FCMEN = OFF         Fail-Safe Clock Monitor disabled
//    FCMEN = ON          Fail-Safe Clock Monitor enabled
//
//  Internal/External Oscillator Switchover bit:
//    IESO = OFF          Oscillator Switchover mode disabled
//    IESO = ON           Oscillator Switchover mode enabled
//
//  Power-up Timer Enable bit:
//    PWRT = ON           PWRT enabled
//    PWRT = OFF          PWRT disabled

#pragma config OSC   = HS   
#pragma config FCMEN = OFF
#pragma config IESO  = OFF
#pragma config PWRT  = ON


//  Brown-out Reset Enable bits:
//    BOREN = OFF         Brown-out Reset disabled in hardware and software
//    BOREN = ON          Brown-out Reset enabled and controlled by software
//                        (SBOREN is enabled)
//    BOREN = NOSLP       Brown-out Reset enabled in hardware only and disabled
//                        in Sleep mode (SBOREN is disabled)
//    BOREN = SBORDIS     Brown-out Reset enabled in hardware only (SBOREN is
//                        disabled)
//
//  Brown Out Reset Voltage bits:
//    BORV = 0            Maximum setting
//    BORV = 1
//    BORV = 2
//    BORV = 3            Minimum setting

#pragma config BORV = 3

#if __DEBUG
#pragma config BOREN = OFF
#else
#pragma config BOREN = OFF
#endif


//
//  Watchdog Timer Enable bit:
//    WDT = OFF           WDT disabled (control is placed on the SWDTEN bit)
//    WDT = ON            WDT enabled
//
//  Watchdog Timer Postscale Select bits:
//    WDTPS = 1           1:1
//    WDTPS = 2           1:2
//    WDTPS = 4           1:4
//    WDTPS = 8           1:8
//    WDTPS = 16          1:16
//    WDTPS = 32          1:32
//    WDTPS = 64          1:64
//    WDTPS = 128         1:128
//    WDTPS = 256         1:256
//    WDTPS = 512         1:512
//    WDTPS = 1024        1:1024
//    WDTPS = 2048        1:2048
//    WDTPS = 4096        1:4096
//    WDTPS = 8192        1:8192
//    WDTPS = 16384       1:16384
//    WDTPS = 32768       1:32768

#pragma config WDT   = OFF
#pragma config WDTPS = 32768


//  CCP2 MUX bit:
//    CCP2MX = PORTBE     CCP2 input/output is multiplexed with RB3
//    CCP2MX = PORTC      CCP2 input/output is multiplexed with RC1

#pragma config CCP2MX = PORTC


//  PORTB A/D Enable bit:
//    PBADEN = OFF        PORTB<4:0> pins are configured as digital I/O on Reset
//    PBADEN = ON         PORTB<4:0> pins are configured as analog input
//                        channels on Reset

#pragma config PBADEN = OFF


//  Low-Power Timer1 Oscillator Enable bit:
//    LPT1OSC = OFF       Timer1 configured for higher power operation
//    LPT1OSC = ON        Timer1 configured for low-power operation

#pragma config LPT1OSC = OFF


//  MCLR Pin Enable bit:
//    MCLRE = OFF         RE3 input pin enabled; MCLR disabled
//    MCLRE = ON          MCLR pin enabled; RE3 input pin disabled

#pragma config MCLRE = ON


//  Stack Full/Underflow Reset Enable bit:
//    STVREN = OFF        Stack full/underflow will not cause Reset
//    STVREN = ON         Stack full/underflow will cause Reset
//
//  Single-Supply ICSP Enable bit:
//    LVP = OFF           Single-Supply ICSP disabled
//    LVP = ON            Single-Supply ICSP enabled
//
//  Background Debugger Enable bit:
//    DEBUG = ON          Background debugger enabled, RB6 and RB7 are dedicated
//                        to In-Circuit Debug
//    DEBUG = OFF         Background debugger disabled, RB6 and RB7 configured
//                        as general purpose I/O pins
//
//  NOTE: LVP = ON is not compatible with DEBUG = ON

#pragma config STVREN = OFF

#if __DEBUG
#pragma config DEBUG = ON
#pragma config LVP   = OFF
#else
#pragma config DEBUG = OFF
#pragma config LVP   = ON
#endif


//  Extended Instruction Set Enable bit:
//    XINST = OFF         Instruction set extension and Indexed Addressing mode
//                        disabled (Legacy mode)
//    XINST = ON          Instruction set extension and Indexed Addressing mode
//                        enabled

#pragma config XINST = OFF


//  Code Protection bit:
//    CP0 = ON            Block 0 (000800-001FFFh) code-protected
//    CP0 = OFF           Block 0 (000800-001FFFh) not code-protected
//
//  Code Protection bit:
//    CP1 = ON            Block 1 (002000-003FFFh) code-protected
//    CP1 = OFF           Block 1 (002000-003FFFh) not code-protected
//
//  Code Protection bit:
//    CP2 = ON            Block 2 (004000-005FFFh) code-protected
//    CP2 = OFF           Block 2 (004000-005FFFh) not code-protected
//
//  Code Protection bit:
//    CP3 = ON            Block 3 (006000-007FFFh) code-protected
//    CP3 = OFF           Block 3 (006000-007FFFh) not code-protected

#pragma config CP0 = OFF
#pragma config CP1 = OFF
#pragma config CP2 = OFF
#pragma config CP3 = OFF


//  Boot Block Code Protection bit:
//    CPB = ON            Boot block (000000-0007FFh) code-protected
//    CPB = OFF           Boot block (000000-0007FFh) not code-protected
//
//  Data EEPROM Code Protection bit:
//    CPD = ON            Data EEPROM code-protected
//    CPD = OFF           Data EEPROM not code-protected

#pragma config CPB = OFF
#pragma config CPD = OFF


//  Write Protection bit:
//    WRT0 = ON           Block 0 (000800-001FFFh) write-protected
//    WRT0 = OFF          Block 0 (000800-001FFFh) not write-protected
//
//  Write Protection bit:
//    WRT1 = ON           Block 1 (002000-003FFFh) write-protected
//    WRT1 = OFF          Block 1 (002000-003FFFh) not write-protected
//
//  Write Protection bit:
//    WRT2 = ON           Block 2 (004000-005FFFh) write-protected
//    WRT2 = OFF          Block 2 (004000-005FFFh) not write-protected
//
//  Write Protection bit:
//    WRT3 = ON           Block 3 (006000-007FFFh) write-protected
//    WRT3 = OFF          Block 3 (006000-007FFFh) not write-protected

#pragma config WRT0 = OFF
#pragma config WRT1 = OFF
#pragma config WRT2 = OFF
#pragma config WRT3 = OFF


//  Configuration Register Write Protection bit:
//    WRTC = ON           Configuration registers (300000-3000FFh)
//                        write-protected
//    WRTC = OFF          Configuration registers (300000-3000FFh) not
//                        write-protected
//
//  Boot Block Write Protection bit:
//    WRTB = ON           Boot block (000000-0007FFh) write-protected
//    WRTB = OFF          Boot block (000000-0007FFh) not write-protected
//
//  Data EEPROM Write Protection bit:
//    WRTD = ON           Data EEPROM write-protected
//    WRTD = OFF          Data EEPROM not write-protected

#pragma config WRTC = OFF
#pragma config WRTB = OFF
#pragma config WRTD = OFF


//  Table Read Protection bit:
//    EBTR0 = ON          Block 0 (000800-001FFFh) protected from table reads
//                        executed in other blocks
//    EBTR0 = OFF         Block 0 (000800-001FFFh) not protected from table
//                        reads executed in other blocks
//
//  Table Read Protection bit:
//    EBTR1 = ON          Block 1 (002000-003FFFh) protected from table reads
//                        executed in other blocks
//    EBTR1 = OFF         Block 1 (002000-003FFFh) not protected from table
//                        reads executed in other blocks
//
//  Table Read Protection bit:
//    EBTR2 = ON          Block 2 (004000-005FFFh) protected from table reads
//                        executed in other blocks
//    EBTR2 = OFF         Block 2 (004000-005FFFh) not protected from table
//                        reads executed in other blocks
//
//  Table Read Protection bit:
//    EBTR3 = ON          Block 3 (006000-007FFFh) protected from table reads
//                        executed in other blocks
//    EBTR3 = OFF         Block 3 (006000-007FFFh) not protected from table
//                        reads executed in other blocks

#pragma config EBTR0 = OFF
#pragma config EBTR1 = OFF
#pragma config EBTR2 = OFF
#pragma config EBTR3 = OFF


//  Boot Block Table Read Protection bit:
//    EBTRB = ON          Boot block (000000-0007FFh) protected from table reads
//                        executed in other blocks
//    EBTRB = OFF         Boot block (000000-0007FFh) not protected from table
//                        reads executed in other blocks

#pragma config EBTRB = OFF


#endif  // #ifndef CONFIGREGS18F4520_H

